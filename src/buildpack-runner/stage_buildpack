#!/usr/bin/env bash

set -e

function indent() {
  c='s/^/       /'
  case $(uname) in
    Darwin) sed -l "$c";;
    *)      sed -u "$c";;
  esac
}

unset GIT_DIR
BUILDPACK=$1

echo "----> Staging buildpack ${BUILDPACK}"

mkdir -p /app/tmp
mkdir -p /app/cache
dir=$(TMPDIR=/app/tmp mktemp -d -t buildpack-XXXXX)

url=${BUILDPACK%#*}
branch=${BUILDPACK#*#}

if [ "$branch" == "$url" ]; then
  branch=""
fi

if [ "$url" != "" ]; then
  echo "=====> Downloading Buildpack: $url to $dir"

  if [[ "$url" =~ \.tgz$ ]]; then
    mkdir -p "$dir"
    curl -s "$url" | tar xvz -C "$dir" >/dev/null 2>&1
  elif [[ "$url" =~ \.zip$ ]]; then
    mkdir -p "$dir"
    curl -s "$url" | unzip -d "$dir" >/dev/null 2>&1
  else
    git clone $url $dir >/dev/null 2>&1
  fi
  cd $dir

  if [ "$branch" != "" ]; then
    git checkout $branch >/dev/null 2>&1
  fi
  git submodule update --init >/dev/null 2>&1
  # we'll get errors later if these are needed and don't exist
  chmod -f +x $dir/bin/{detect,compile,release} || true

  framework=$($dir/bin/detect /app)

  if [ $? == 0 ]; then
    echo "=====> Detected Framework: $framework"
    bash -x $dir/bin/compile /app /app/cache | tee $dir/staging-compile.log

    if [ $? != 0 ]; then
      echo "ERROR: $dir/bin/compile /app /app/cache exited with $?"
      exit 1
    fi
  fi
fi
